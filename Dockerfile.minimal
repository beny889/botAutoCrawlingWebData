# Minimal Docker Configuration - Focus on Selenium Installation
# Using the most reliable approach for Render.com deployment
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Set environment to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1

# Install system dependencies in one layer
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    unzip \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install Google Chrome (essential for Selenium)
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages one by one for maximum reliability
RUN pip install --no-cache-dir --upgrade pip
RUN pip install --no-cache-dir selenium==4.15.0
RUN pip install --no-cache-dir webdriver-manager==4.0.1
RUN pip install --no-cache-dir pandas==2.0.3
RUN pip install --no-cache-dir gspread==5.11.3
RUN pip install --no-cache-dir google-auth==2.23.4
RUN pip install --no-cache-dir openpyxl==3.1.2
RUN pip install --no-cache-dir requests==2.31.0
RUN pip install --no-cache-dir numpy==1.24.4

# Test critical imports after installation
RUN python -c "import selenium; print('Selenium OK')"
RUN python -c "import pandas; print('Pandas OK')"
RUN python -c "import gspread; print('Gspread OK')"

# Copy application files
COPY main_scheduler.py .
COPY single_session_automation.py .
COPY exports/ ./exports/
COPY shared/ ./shared/

# Create required directories
RUN mkdir -p downloads logs

# Set Chrome environment variables
ENV CHROME_BIN=/usr/bin/google-chrome-stable
ENV DISPLAY=:99

# Create service account key from environment variable at runtime
RUN echo '#!/bin/bash\n\
echo "=== Runtime Startup ==="\n\
if [ -n "$GOOGLE_SERVICE_ACCOUNT_JSON" ]; then\n\
    echo "$GOOGLE_SERVICE_ACCOUNT_JSON" > /app/service-account-key.json\n\
    echo "Service account created"\n\
fi\n\
echo "Starting automation..."\n\
python main_scheduler.py --all --headless --production --single-session\n' > /app/start.sh && chmod +x /app/start.sh

# Execute the startup script
CMD ["/app/start.sh"]